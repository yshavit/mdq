name: rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: cargo build
      run: scripts/cargo_to_gh rustc --message-format json -- -Awarnings
    - name: check for any changes in the git tree
      run: |
        exit_code=0
        while read -r status_code file_path; do
          if [[ -z "$status_code" ]]; then
            continue
          fi
          exit_code=1
          echo "::error file=$file_path,title=git-status::<$status_code> $file_path"
        done <<<"$(git status --porcelain)"
        exit "$exit_code"
  msrv:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    - name: find version mentioned in readme
      id: readme-version
      run: |
        set -euo pipefail
        pwd
        mkdir -p target/debug
        cargo build
        readme_version="$(cat README.md | ./target/debug/mdq '# Development | P: "Requires rustc >=" ' | awk '{print $NF}')"
        echo "Found version in readme: <$readme_version>"
        echo "result=$readme_version" >> "$GITHUB_OUTPUT"
    - name: pull cargo-msrv from docker hub
      run: docker pull foresterre/cargo-msrv
    - name: find minimum supported rust version
      id: run-msrv
      run: |
        set -euo pipefail
        min_version="$(docker run --rm -t -v "$PWD/":/app/ foresterre/cargo-msrv find --no-log --output-format minimal | tr -d $'\r\n')"
        echo "Found version in cargo-msrv: <$min_version>"
        echo "result=$min_version" >> "$GITHUB_OUTPUT"
    - name: compare versions
      run: |
        if [[ "$MSRV_VERSION" != "$README_VERSION" ]]; then
          echo "::error title=msrv-mismatch::cargo-msrv was $MSRV_VERSION but README.md says rustc >= $README_VERSION"
          exit 1
        fi
      env:
        MSRV_VERSION: ${{ steps.run-msrv.outputs.result }}
        README_VERSION: ${{ steps.readme-version.outputs.result }}

  check:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    - name: cargo check
      run: scripts/cargo_to_gh check

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    - name: cargo test
      run: |
        # convert e.g. "thread 'fmt_str::tests::text_html' panicked at src/fmt_str.rs:75:9:" to
        #              "::error file=src/fmt_str,line=75,col=9,title=test failure:: atfmt_str::tests::text_html"
        set -o pipefail
        cargo test --verbose | sed -E "s/thread '([^']+)' panicked at ([^:]+):([0-9]+):([0-9]+):$/::error file=\\2,line=\\3,col=\\4,title=test failure::at \\1/"
    - name: list ignored tests
      run: |
        (find . -name '*.rs' -exec grep --fixed-strings -Hno '#[ignore]' {} \; || true) | sed -E 's/^([^:]+):([^:]+):.*/::warning file=\1,line=\2,title=Ignored test::Regex indicates this test is probably ignored/'
    - name: check ignored tests all fail
      run: |
        exit_code=0
        while IFS= read -r line; do
          printf "::error title=Ignored test is passing::%s but expected failure because it's ignored"'\n' "$line"
          exit_code=1
        done < <(cargo test -- --ignored --color never | grep '\.\.\. ok$' || true)
        exit "$exit_code"

  fmt:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: cargo fmt
      run: cargo fmt --check
